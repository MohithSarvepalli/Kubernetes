Pod:
apiVersion: v1
kubectl get pods -n <namespace> --> will get the pods in that namespace
kubectl get pods -o wide --> will give additional info on pods
kubectl describe pod <pod_name> --> will give all necesssary info on the pod
kubectl delete pod <pod_name> --> will delete the pod 

ReplicaSet:
apiVersion:apps/v1 
kubectl get replicasets -n <namespace> --> will get the replicasets in that namespace
kubectl describe replicaset <name of the replicaset> -n <namespace> --> will give all necesssary info on the replicaset
kubectl delete replicaset <name> --> will delete the replicaset
kubectl edit replicaset <name> --> edit there and it will be applied
kubectl scale rs <name> --replicas=<number> --> will scale up or down based on the number.

Deployment:
apiVersion:apps/v1 
kubectl get all -n <namespace> --> will give hierarchy of whole deployment
kubectl get deployment <name> -n <namespace> --> will get deployment in that namespace
kubectl describe deployment <name> -n <namespace> --> will give all necesssary info on the deployment

Namespace:
kubectl get namespaces
kubectl get pods --all-namespaces --> will get all pods in all namespaces

ImperativeCommands:
kubectl run <pod_name> --image=<name of the image>
kubectl expose pod <pod_name> --port=<port_number> --name <name of the server> --> for creating a service
kubectl create deployment  <deployment name> --image=<image name> --replicas=<number> -n <namespace> --> for creating a deployment
kubectl create ns <name> --> for creating namespace

ConfigMap:
Imperative- kubectl create configmap <config-name> --from-literal=<key>=<value> --from-literal=<key>=<value> ....
Declarative-
apiVersion: v1
kind:ConfigMap, metadata and data: <key>:<value>
kubectl get configmaps -n <namespace> --> gets all the config map in the desired namespace
kubectl describe configmaps -n <namespace> --> describes the configmaps under the namespace

Secrets:
Imperative- kubectl create secret generic <secret-name> --from-literal=<key>=<value> --from-literal=<key>=<value> ....
Declarative-
apiVersion: v1
kind: Secret, metadata and data: <key>:<value>
kubectl get secrets
kubectl describe secrets

ServiceAccounts:
kubectl create serviceaccount <SA NAME>
kubectl get serviceaccount
kubectl describe serviceaccount

Taints-Tolerate
kubectl taint nodes node-name key=value:taint-effect 
taint-effects
NoSchedule--> applied before any pod is placed and only the pods which are to tolerated to the taints are placed
PreferNoSchedule--> It will try not to place the pod but its not guaranteed
NoExecute--> applied after pods are present in node, and if the pod do not tolerated then it is evicted from the node

Tolerations Syntax:
add new block under spec in the pod
tolerations:
    - key : "app"
      operator: "Equal"
      value: "blue"
      effect: "NoSchedule"

Labels
kubectl label node <node-name> <key>=<value>